#/****************************************************************************
#*
#*     Copyright (c) 2004 Broadcom Corporation
#*           All Rights Reserved
#*
#*     No portions of this material may be reproduced in any form without the
#*     written permission of:
#*
#*           Broadcom Corporation
#*           16215 Alton Parkway
#*           P.O. Box 57013
#*           Irvine, California 92619-7013
#*
#*     All information contained in this document is Broadcom Corporation
#*     company private, proprietary, and trade secret.
#*
#****************************************************************************/

import os, sys
import string
import re

for file in sys.argv[1:]:
    # Read in file
    fpi = open(file,"r")
    el = string.split(file,'/')
    ofile = el[len(el)-1]
    pfile = string.replace(ofile,".h", ".py")
    ofile = string.replace(ofile,".h", ".c")
    ofile = "mk_%s" % ofile
    fpo = open(ofile,"w+")
    print "Making", ofile
    fpo.write('#include <stdio.h>\n\n')
    fpo.write('#define __packed\n\n')
	# FixMe -- PLEASE REVIEW THE FOLLOWING STATEMENTS -- SHOULD
    # probably be replaced by proper includes
    fpo.write('typedef void * Task_t;\n\n')
    fpo.write('typedef void *xSignalHeader;\n\n')
    fpo.write('#include "%s"\n\n' % "mobcom_types.h")
    fpo.write('#include "%s"\n\n' % "resultcode.h")
    fpo.write('#include "%s"\n\n' % "taskmsgs.h")
    fpo.write('#include "%s"\n\n' % file)
    fpo.write('#define _(name)\\\n')
    fpo.write('    fprintf(fpo, #name " = \\"%d=" #name "\\"\\n", name)\n')
    fpo.write('\n\n')
    fpo.write('int main(int argc, char* argv[]) { \n')
    fpo.write('    FILE* fpo = fopen("%s","w+");\n' % pfile)
    fpo.write('    fputs("#\\n",fpo);\n')
    fpo.write('    fputs("# \\\\author Arne Varholm\\n",fpo);\n')
    fpo.write('    fputs("# \\\\remarks Copyright 2003 Broadcom Corporation\\n",fpo);\n')
    fpo.write('    fputs("# $Id: extractenums.py,v 1.9 2004/04/18 17:57:38 arne Exp $\\n",fpo);\n')
    fpo.write('    fputs("#\\n",fpo);\n')
    fpo.write('    fputs("# This file is autogenerated from header file\\n",fpo);\n')
    fpo.write('    fputs("# %s by the %s script\\n",fpo);\n' % (file, sys.argv[0]))
    fpo.write('    fputs("#\\n",fpo);\n')
    # Convert
    braces = 0
    startEnum = 0
    line = 0
    comment = 0
    for s in fpi.xreadlines():
        line += 1
        # Cut at //
        cix = string.find(s, '//')
        if cix != -1:
            s = s[:cix]
        # Start of comment ?
        cix1 = string.find(s, '/*')
        cix2 = string.find(s, '*/')
        if cix1 != -1 and cix2 != -1:
            # Delete between /* and */ on same line
            s = s[:cix1] + s[cix2+2:]
        elif cix1 != -1:
            # Delete after /* on line
            s = s[:cix1]
            comment = 1
        elif cix2 != -1:
            # Delete before */
            s = s[cix2+2:]
            comment = 0
        elif comment == 1:
            s = ''
        # Processing enum ?
        if s != '' and startEnum == 1:
            # C preprocessor ?
            if s[0:1] == '#':
                fpo.write('%s\n' % s)
            else:
                # Cut at =
                cix = string.find(s, '=')
                if cix != -1:
                    s = s[:cix]
                # Cut at '
                cix = string.find(s, ',')
                if cix != -1:
                    s = s[:cix]
                el = string.split(s)
                for ss in el:
                    if string.find(ss, '{') != -1:
                        braces += 1
                    elif string.find(ss, '}') != -1:
                        braces -= 1
                    if braces == 0:
                        startEnum = 0
                    elif startEnum:
                        if ss != '{' and comment == 0:
                            fpo.write('     _(%s);\n' % ss)
        elif string.find(s, 'enum') != -1:
            startEnum = 1
            if string.find(s, '}') != -1:
                braces = 0
            elif string.find(s, '{') != -1:
                braces = 1
    fpo.write('return 0;\n}\n')
